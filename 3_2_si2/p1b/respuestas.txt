------------------Cuestion 1------------------

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.ejb.Local;

@Local

Local se utiliza para definir la interfaz como local y no remota.
Los imports que se muestran son los mismos que se realizan en VisaDAOBean.java

"Comparar esta interfaz con el fichero de configuración del web service implementado en la práctica P1A"?????????

------------------Ejercicio 1------------------
Implemente interfaz local y stateless:

@Stateless(mappedName="VisaDAOBean")
public class VisaDAOBean extends DBTester implements VisaDAOLocal{

Ajustar getPagos()

public PagoBean[] getPagos(String idComercio) {
    PreparedStatement pstmt = null;
    Connection pcon = null;
    ResultSet rs = null;
    PagoBean[] ret = null;
    ArrayList<PagoBean> pagos = null;
    String qry = null;

    try {
        ...
        ret = new PagoBean[pagos.size()];
        ret = pagos.toArray(ret);
        ...
        } catch (Exception e) {
            ...
        } finally {
            ...
        }
        return ret;
    }
------------------Ejercicio 2------------------
PagoBean[] pagos = dao.getPagos(idComercio);        

request.setAttribute(ATTR_PAGOS, pagos);
reenvia("/listapagos.jsp", request, response);
return; 

Se cambiaron los archivos ProcesaPago.java, GetPagos.java, DelPagos.java de la misma forma todos.

------------------Cuestion 2------------------
<application></application> : Root.
Nombre en pantalla: P1-ejb
Hay definidos dos módulos con <module></module>. Uno para el servidor y otro para el cliente ya que son los dos módulos Java EE que forman la aplicación.
El módulo del cliente se considera además <web> y se define su <context-root> /P1-ejb-cliente

$ jar -tvf P1-ejb.jar 
     0 Wed Mar 17 17:03:10 CET 2021 META-INF/
   125 Wed Mar 17 17:03:08 CET 2021 META-INF/MANIFEST.MF
     0 Wed Mar 17 17:01:50 CET 2021 ssii2/
     0 Wed Mar 17 17:01:50 CET 2021 ssii2/visa/
     0 Wed Mar 17 17:01:50 CET 2021 ssii2/visa/dao/
   255 Wed Mar 17 17:03:08 CET 2021 META-INF/sun-ejb-jar.xml
  1464 Wed Mar 17 17:01:50 CET 2021 ssii2/visa/PagoBean.class
   856 Wed Mar 17 17:01:50 CET 2021 ssii2/visa/TarjetaBean.class
   593 Wed Mar 17 17:01:50 CET 2021 ssii2/visa/VisaDAOLocal.class
  1730 Wed Mar 17 17:01:50 CET 2021 ssii2/visa/dao/DBTester.class
  7048 Wed Mar 17 17:01:50 CET 2021 ssii2/visa/dao/VisaDAOBean.class

$ jar -tvf P1-ejb-cliente.war 
     0 Wed Mar 17 17:24:58 CET 2021 META-INF/
   125 Wed Mar 17 17:24:56 CET 2021 META-INF/MANIFEST.MF
     0 Wed Mar 17 17:24:56 CET 2021 WEB-INF/
     0 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/
     0 Wed Mar 17 17:23:52 CET 2021 WEB-INF/classes/ssii2/
     0 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/controlador/
     0 Wed Mar 17 17:23:52 CET 2021 WEB-INF/classes/ssii2/filtros/
     0 Wed Mar 17 17:23:52 CET 2021 WEB-INF/classes/ssii2/visa/
     0 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/visa/error/
     0 Wed Mar 17 17:01:48 CET 2021 WEB-INF/lib/
     0 Wed Mar 17 17:24:56 CET 2021 error/
  2844 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/controlador/ComienzaPago.class
  1786 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/controlador/DelPagos.class
  1684 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/controlador/GetPagos.class
  5018 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/controlador/ProcesaPago.class
  1894 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/controlador/ServletRaiz.class
  2608 Wed Mar 17 17:23:52 CET 2021 WEB-INF/classes/ssii2/filtros/CompruebaSesion.class
  3170 Wed Mar 17 17:23:52 CET 2021 WEB-INF/classes/ssii2/visa/ValidadorTarjeta.class
   616 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/visa/error/ErrorVisa.class
   198 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/visa/error/ErrorVisaCVV.class
   209 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/visa/error/ErrorVisaFechaCaducidad.class
   207 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/visa/error/ErrorVisaFechaEmision.class
   201 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/visa/error/ErrorVisaNumero.class
   202 Wed Mar 17 17:23:50 CET 2021 WEB-INF/classes/ssii2/visa/error/ErrorVisaTitular.class
  6180 Wed Mar 17 17:24:56 CET 2021 WEB-INF/web.xml
   455 Wed Mar 17 17:24:56 CET 2021 borradoerror.jsp
   501 Wed Mar 17 17:24:56 CET 2021 borradook.jsp
   509 Wed Mar 17 17:24:56 CET 2021 cabecera.jsp
   283 Wed Mar 17 17:24:56 CET 2021 error/muestraerror.jsp
  2729 Wed Mar 17 17:24:56 CET 2021 formdatosvisa.jsp
  1257 Wed Mar 17 17:24:56 CET 2021 listapagos.jsp
  1178 Wed Mar 17 17:24:56 CET 2021 pago.html
  1142 Wed Mar 17 17:24:56 CET 2021 pagoexito.jsp
   104 Wed Mar 17 17:24:56 CET 2021 pie.html
  5011 Wed Mar 17 17:24:56 CET 2021 testbd.jsp


------------------Ejercicio 3------------------
as.host.client=10.3.12.2
as.host.server=10.3.12.2

Porque ambos se encontrarán en el servidor de aplicaciones.

db.host=10.3.12.1
db.client.host=10.3.12.2

------------------Ejercicio 4------------------
Comentar fotos 


------------------Ejercicio 5------------------
public class VisaDAOBean extends DBTester implements VisaDAOLocal, VisaDAORemote{


@Remote
public interface VisaDAORemote {

public class PagoBean implements Serializable{

public class TarjetaBean implements Serializable{


------------------Ejercicio 6------------------
Realizamos los cambios. Tuvimos que volver a actualizar la llamada a dao.realizaPago() en ProcesaPago.java ya que la interfaz había cambiado (ahora devolvía un nuevo pago actualizado)

------------------Ejercicio 7------------------

public class TarjetaBean {
    private String numero;
    private String titular;
    private String fechaEmision;
    private String fechaCaducidad;
    private String codigoVerificacion; /* CVV2 */
    private double saldo;
    ...

    /**
     * Devuelve el saldo de la tarjeta
     * @return el saldo
     */
    public double getSaldo(){
        return saldo;
    }

    /**
     * Establece el saldo de la tarjeta
     * @param saldo el saldo
     */
    public void setSaldo(double saldo){
        this.saldo = saldo;
    }


import javax.ejb.EJBException;

private static final String SELECT_SALDO_QRY = 
                    "select saldo from tarjeta " + 
                    "where numeroTarjeta=? " +
                    " and titular=? " +
                    " and validaDesde=? " +
                    " and validaHasta=? " +
                    " and codigoVerificacion=? ";

private static final String SET_SALDO_QRY = 
                    "update tarjeta set saldo=? " +
                    "where numeroTarjeta=? " +
                    " and titular=? " +
                    " and validaDesde=? " +
                    " and validaHasta=? " +
                    " and codigoVerificacion=? ";

public synchronized PagoBean realizaPago(PagoBean pago) throws EJBException{
    ...
    boolean proceso_saldo = false;
    ...
    // Obtener conexion
    con = getConnection();

    // Comprobar saldo
    double saldo = 0;
    String select_saldo = SELECT_SALDO_QRY;
    errorLog(select_saldo);
    pstmt = con.prepareStatement(select_saldo);
    pstmt.setString(1, pago.getTarjeta().getNumero());
    pstmt.setString(2, pago.getTarjeta().getTitular());
    pstmt.setString(3, pago.getTarjeta().getFechaEmision());
    pstmt.setString(4, pago.getTarjeta().getFechaCaducidad());
    pstmt.setString(5, pago.getTarjeta().getCodigoVerificacion());
    rs = pstmt.executeQuery(); 

    if (rs.next()) {
        saldo = rs.getDouble("saldo");
        if (saldo >= pago.getImporte()){
            ret = true;
        }
    }
    // Actualizar saldo
    if (ret){
        saldo = saldo - pago.getImporte();
        String update_saldo = SET_SALDO_QRY;
        errorLog(update_saldo);
        pstmt = con.prepareStatement(update_saldo);
        pstmt.setDouble(1, saldo);
        pstmt.setString(2, pago.getTarjeta().getNumero());
        pstmt.setString(3, pago.getTarjeta().getTitular());
        pstmt.setString(4, pago.getTarjeta().getFechaEmision());
        pstmt.setString(5, pago.getTarjeta().getFechaCaducidad());
        pstmt.setString(6, pago.getTarjeta().getCodigoVerificacion());
        ret = false;
        if (!pstmt.execute() && pstmt.getUpdateCount() == 1){
            ret = true;
        }
    }
    ...
    if (proceso_saldo){
        // Si el saldo es correcto, comprobar errores
        if (ret) return pago;
        else throw new EJBException("Error en proceso de insercion de pago y obtencion de autorizacion.");
        
    } else return null;



try{
    ... 
} catch (EJBException ejbe){
    if (sesion != null) sesion.invalidate();
    enviaError(ejbe, request, response);
    return;
} catch(ServletException | IOException ex){
    ...

------------------Ejercicio 8------------------
fotos

------------------Ejercicio 9------------------
Fotos 

------------------Ejercicio 10------------------
Fotos 

------------------Ejercicio 11------------------
<ejb>
    <ejb-name>VisaCancelacionJMSBean</ejb-name>
    <mdb-connection-factory>
    <jndi-name>jms/VisaConnectionFactory</jndi-name>
    </mdb-connection-factory>
</ejb>

private static final String UPDATE_CANCELA_QRY = 
                    "update pago set codrespuesta='999' " +
                    "where idautorizacion = ?";

private static final String RECTIFICAR_SALDO_QRY = 
                            "update tarjeta " + 
                            "set saldo = saldo + importe " +
                            "from ( select numerotarjeta, importe " +
                                    "from pago " +
                                    "where idautorizacion = ?) as rectificacion " +  
                            "where rectificacion.numerotarjeta = tarjeta.numerotarjeta";

public void onMessage(Message inMessage) {
    TextMessage msg = null;
    Connection con = null;
    PreparedStatement pstmt = null;

    try {
        if (inMessage instanceof TextMessage) {
            msg = (TextMessage) inMessage;
            logger.info("MESSAGE BEAN: Message received: " + msg.getText());
            
            if (msg.getText() == null) logger.warning("Mensaje sin texto.");
            else{
                con = getConnection();
                // Se cambia el codigo del pago
                String update_codigo = UPDATE_CANCELA_QRY;
                logger.info(update_codigo);
                pstmt = con.prepareStatement(update_codigo);
                pstmt.setInt(1, Integer.parseInt(msg.getText()));
                if (!pstmt.execute() && pstmt.getUpdateCount() == 1){
                    // Rectificar el saldo del cliente
                    String rectificar = RECTIFICAR_SALDO_QRY;
                    logger.info(rectificar);
                    pstmt = con.prepareStatement(rectificar);
                    pstmt.setInt(1, Integer.parseInt(msg.getText()));
                    if (!pstmt.execute() && pstmt.getUpdateCount() == 1) logger.warning("Error rectificando saldo.");
                }
                else logger.warning("Error actualizando codigo.");
            }
        } else {
            logger.warning(
                    "Message of wrong type: "
                    + inMessage.getClass().getName());
        }
    } catch (SQLException sqle) {
        sqle.printStackTrace();
    } catch (JMSException e) {
        e.printStackTrace();
        mdc.setRollbackOnly();
    } catch (Throwable te) {
        te.printStackTrace();
    } finally {
        try {
            if (pstmt != null) {
                pstmt.close(); pstmt = null;
            }
            if (con != null) {
                closeConnection(con); con = null;
            }
        } catch (SQLException e) {
        }
    }
}



------------------Ejercicio 12------------------
El estático podría ser el más eficiente y simple pero el dinámico es el más potente de cara a proporcionar mayor transparencia al cliente.


@Resource(mappedName = "jms/VisaConnectionFactory")
private static ConnectionFactory connectionFactory;
@Resource(mappedName = "jms/VisaPagosQueue")
private static Queue queue;

try {
    // TODO: Inicializar connectionFactory
    // y queue mediante JNDI
    /*InitialContext jndi = new InitialContext();
    connectionFactory = (ConnectionFactory)jndi.lookup("jms/VisaConnectionFactory");
    queue = (Queue)jndi.lookup("jms/VisaPagosQueue");*/

    connection = connectionFactory.createConnection();
    session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    if (args[0].equals("-browse")) {
        browseMessages(session); 
    } else {
        // TODO: Enviar argv[0] como mensaje de texto
        messageProducer = session.createProducer(queue);
        message = session.createTextMessage();
        message.setText(args[0]);
        messageProducer.send(message);
    }
    } catch (Exception e) {
        System.out.println("Excepcion : " + e.toString());
    } finally {
        if (messageProducer != null){
            try {
                messageProducer.close();
            } catch (JMSException e) {
            }
        }
        if (session != null){
            try {
                session.close();
            } catch (JMSException e) {
            }
        }
        if (connection != null) {
            try {
                connection.close();
            } catch (JMSException e) {
            }
        } // if
        
        System.exit(0);
    } // finally

------------------Ejercicio 13------------------
as.home=${env.J2EE_HOME}
as.lib=${as.home}/lib
as.user=admin
as.host.client=localhost
as.host.server=10.3.12.2
as.port=4848
as.passwordfile=${basedir}/passwordfile
as.target=server
jms.factoryname=jms/VisaConnectionFactory
jms.name=jms/VisaPagosQueue
jms.physname=VisaPagosQueue

as.host.mdb=10.3.12.2

<target name="create-jms-resource"
    description="creates jms destination resource">
    <exec executable="${asadmin}">
        <arg line=" --user ${as.user}" />
        <arg line=" --passwordfile ${as.passwordfile}" />
        <arg line=" --host ${as.host.server}" />
        <arg line=" --port ${as.port}" />
        <arg line="create-jms-resource"/>
        <arg line=" --restype ${jms.restype}" />
        <arg line=" --enabled=true" />
        <arg line=" --property ${jms.resource.property}" />
        <arg line=" ${jms.resource.name}" />
    </exec>
</target>

------------------Ejercicio 14------------------


/opt/glassfish4/glassfish/bin/appclient -targetserver 10.3.12.2 -client dist/clientjms/P1-jms-clientjms.jar idAutorizacion
mar 19, 2021 1:42:52 PM org.hibernate.validator.internal.util.Version <clinit>
INFO: HV000001: Hibernate Validator 5.1.2.Final
mar 19, 2021 1:42:52 PM com.sun.messaging.jms.ra.ResourceAdapter start
INFORMACIÓN: MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter: Version:  5.1.1  (Build 2-c) Compile:  March 17 2015 1045
mar 19, 2021 1:42:52 PM com.sun.messaging.jms.ra.ResourceAdapter start
INFORMACIÓN: MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter starting: broker is REMOTE, connection mode is TCP
mar 19, 2021 1:42:52 PM com.sun.messaging.jms.ra.ResourceAdapter start
INFORMACIÓN: MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter Started:REMOTE


/opt/glassfish4/glassfish/bin/appclient -targetserver 10.3.12.2 -client dist/clientjms/P1-jms-clientjms.jar -browse
mar 19, 2021 1:44:06 PM org.hibernate.validator.internal.util.Version <clinit>
INFO: HV000001: Hibernate Validator 5.1.2.Final
mar 19, 2021 1:44:06 PM com.sun.messaging.jms.ra.ResourceAdapter start
INFORMACIÓN: MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter: Version:  5.1.1  (Build 2-c) Compile:  March 17 2015 1045
mar 19, 2021 1:44:06 PM com.sun.messaging.jms.ra.ResourceAdapter start
INFORMACIÓN: MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter starting: broker is REMOTE, connection mode is TCP
mar 19, 2021 1:44:06 PM com.sun.messaging.jms.ra.ResourceAdapter start
INFORMACIÓN: MQJMSRA_RA1101: GlassFish MQ JMS Resource Adapter Started:REMOTE
Mensajes en cola:
idAutorizacion
